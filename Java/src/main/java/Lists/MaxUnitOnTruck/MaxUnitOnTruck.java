package Lists.MaxUnitOnTruck;

import java.util.*;

public class MaxUnitOnTruck {

    public static void main (String [] args) {
//        int [][] boxTypes = {{1,3}, {2,2}, {3,1}}; int truckSize = 4;
//        System.out.println("MaxUnits: " + maximumUnits(boxTypes, truckSize));
//
//        int [][] boxTypes2 = {{5,10}, {2,5}, {4,7}, {3,9}}; int truckSize2 = 10;
//        System.out.println("MaxUnits: " + maximumUnits(boxTypes2, truckSize2));
//
//        int [][] boxTypes3 = {{2,1}, {4,4}, {3,1}, {4,1}, {2,4}, {3,4}, {1,3}, {4,3}, {5,3}, {5,3}}; int truckSize3 = 13;
//        System.out.println("MaxUnits: " + maximumUnits(boxTypes3, truckSize3));

        int [][] boxTypes4 = {{776,145},{573,784},{786,514},{1,863},{423,33},{838,317},{373,698},{733,838},{753,511},{695,988},{286,826},{640,860},{134,658},{617,646},{851,192},{233,721},{96,875},{367,213},{470,512},{933,938},{341,44},{831,224},{412,950},{592,723},{139,513},{225,428},{455,59},{7,392},{134,765},{286,325},{649,963},{67,969},{198,507},{332,386},{356,76},{166,367},{704,814},{163,369},{910,141},{295,175},{86,49},{678,444},{849,129},{945,333},{171,856},{774,109},{184,483},{359,609},{239,86},{526,689},{952,129},{382,309},{731,218},{392,3},{661,873},{669,416},{150,879},{279,890},{278,340},{881,70},{9,537},{175,802},{557,564},{409,277},{295,436},{762,398},{799,361},{778,511},{841,236},{599,261},{408,545},{584,748},{547,383},{89,134},{33,701},{890,790},{709,870},{992,20},{698,699},{790,496},{746,357},{226,889},{750,635},{852,828},{111,611},{394,72},{252,925},{216,276},{293,49},{266,889},{899,886},{109,542},{498,40},{185,103},{565,213},{89,37},{971,733},{805,519},{468,243},{818,137},{521,656},{542,786},{395,289},{925,639},{309,863},{722,228},{280,766},{265,781},{197,857},{190,303},{476,395},{78,854},{639,328},{761,771},{226,560},{317,60},{220,717},{701,850},{177,152},{433,400},{322,601},{577,856},{320,337},{8,223},{940,180},{316,276},{351,725},{527,671},{900,667},{991,158},{78,554},{129,401},{671,959},{870,704},{903,592},{487,295},{376,149},{332,167},{525,395},{318,932},{245,670},{964,19},{141,539},{416,127},{672,414},{185,471},{600,854},{201,474},{652,94},{774,613},{459,628},{438,46},{300,78},{595,909},{843,566},{609,504},{276,924},{502,942},{323,965},{183,172},{370,704},{226,746},{679,948},{758,948},{574,104},{331,362},{814,244},{153,11},{137,784},{286,275},{553,525},{336,913},{695,484},{440,136},{340,223},{218,137},{14,151},{510,178},{884,390},{960,565},{86,623},{813,162},{123,883},{86,751},{952,417},{302,111},{506,10},{161,358},{962,524},{145,609},{405,567},{280,403},{551,88},{241,387},{178,64},{795,560},{256,44},{238,740},{147,765},{745,838},{1000,571},{837,915},{856,675},{975,781},{388,732},{877,143},{436,112},{499,543},{627,670},{735,462},{79,751},{226,384},{203,495},{744,533},{302,765},{658,200},{213,399},{924,334},{719,70},{361,498},{20,222},{982,818},{181,82},{284,578},{110,56},{930,157},{367,590},{5,382},{536,828},{76,113},{739,34},{173,509},{86,906},{239,111},{824,6},{177,619},{316,84},{826,673},{943,757},{476,276},{294,770},{893,217},{996,435},{664,587},{884,273},{315,281},{8,101},{335,663},{941,975},{322,68},{272,876},{80,389},{974,712},{491,548},{724,261},{751,14},{3,925},{4,867},{164,814},{126,501},{600,831},{438,681},{662,213},{288,770},{576,517},{890,657},{902,690},{779,256},{857,675},{572,533},{433,564},{309,932},{142,216},{166,531},{386,445},{534,705},{246,596},{91,368},{180,455},{958,747},{114,147},{555,76},{17,572},{929,944},{807,828},{100,182},{972,108},{369,229},{575,536},{212,107},{779,945},{164,344},{636,74},{988,455},{850,692},{903,328},{191,29},{159,504},{468,994},{431,245},{754,795},{316,301},{675,365},{757,888},{51,593},{15,578},{883,510},{100,198},{164,835},{447,2},{128,426},{874,161},{212,710},{218,311},{911,161},{586,175},{168,456},{39,979},{46,276},{914,491},{599,350},{221,358},{140,162},{610,701},{966,753},{581,748},{196,519},{339,330},{662,150},{524,322},{142,102},{199,211},{972,385},{606,655},{324,115},{7,975},{659,20},{509,596},{755,462},{996,566},{622,717},{502,594},{912,465},{735,507},{85,471},{367,422},{171,908},{840,430},{969,427},{411,229},{376,824},{728,275},{270,414},{133,235},{404,767},{160,594},{731,743},{380,255},{256,758},{367,85},{637,362},{361,440},{791,764},{687,300},{624,60},{264,851},{437,568},{237,963},{416,948},{885,932},{893,910},{666,65},{673,945},{836,429},{367,401},{770,183},{767,208},{366,417},{954,457},{593,756},{438,109},{8,650},{935,89},{610,165},{236,572},{238,439},{989,741},{921,992},{92,223},{412,584},{661,37},{314,530},{492,389},{673,957},{240,481},{836,542},{177,689},{738,192},{122,619},{830,869},{310,652},{323,80},{841,741},{918,121},{428,399},{325,554},{539,660},{127,101},{692,616},{730,620},{389,877},{843,426},{162,414},{979,717},{778,519},{627,940},{886,192},{864,667},{908,934},{494,295},{808,120},{784,921},{916,204},{392,977},{204,639},{809,643},{741,681},{178,496},{755,912},{907,144},{282,975},{943,771},{819,749},{534,660},{680,176},{62,587},{795,693},{853,638},{722,797},{893,107},{769,457},{916,308},{92,126},{282,22},{870,408},{631,899},{303,341},{919,430},{941,546},{565,169},{607,695},{79,770},{839,633},{251,898},{917,915},{245,626},{315,714},{514,117},{511,504},{599,584},{516,230},{571,720},{495,371},{710,33},{700,447},{457,858},{810,282},{382,235},{200,113},{58,265},{345,238},{350,147},{457,255},{144,748},{702,659},{293,373},{621,637},{482,739},{350,804},{456,513},{171,412},{226,508},{590,17},{402,619},{145,51},{130,31},{14,432},{200,109},{774,728},{576,644},{160,193},{670,406},{329,914},{177,428},{300,394},{586,742},{716,176},{215,352},{65,355},{506,602},{653,55},{324,376},{561,983},{628,939},{856,4},{71,174},{349,353},{650,545},{32,408},{30,350},{980,73},{700,31},{148,303},{56,289},{283,178},{588,641},{46,521},{282,688},{452,174},{764,493},{159,771},{531,281},{150,926},{526,565},{193,909},{845,758},{566,291},{983,395},{5,407},{955,10},{222,987},{774,516},{914,634},{150,284},{372,163},{713,198},{748,333},{694,2},{387,290},{660,13},{184,574},{2,233},{849,605},{463,287},{490,261},{166,563},{295,834},{418,704},{429,795},{15,501},{501,610},{691,672},{128,671},{683,360},{525,646},{278,202},{74,661},{882,952},{716,866},{372,734},{187,850},{281,287},{309,592},{195,439},{294,890},{526,690},{618,123},{299,387},{758,22},{991,872},{469,482},{711,69},{196,742},{576,556},{722,597},{202,330},{363,214},{413,390},{4,918},{776,107},{468,825},{402,828},{280,760},{129,681},{575,466},{448,348},{239,357},{830,458},{194,549},{429,268},{188,480},{689,147},{599,167},{218,641},{969,842},{338,776},{440,948},{575,146},{983,323},{396,207},{845,381},{913,960},{523,468},{861,416},{874,863},{593,789},{533,471},{650,26},{234,942},{582,436},{664,231},{501,497},{982,9},{306,158},{221,34},{716,365},{409,683},{449,125},{122,368},{625,637},{484,712},{552,446},{741,777},{101,816},{288,398},{184,171},{137,715},{778,867},{485,483},{858,703},{802,665},{89,625},{308,288},{794,828},{252,825},{897,883},{452,660},{899,367},{411,190},{621,7},{928,513},{755,78},{446,549},{554,420},{350,683},{140,965},{737,99},{549,613},{176,461},{790,227},{316,725},{718,773},{128,711},{322,608},{505,639},{984,568},{19,909},{567,516},{254,790},{522,563},{742,567},{596,384},{70,224},{431,804},{958,436},{141,143},{944,890},{322,872},{601,712},{904,564},{149,604},{149,233},{899,637},{719,285},{995,571},{74,839},{168,625},{369,319},{496,320},{215,71},{299,847},{772,763},{542,771},{741,670},{796,426},{176,585},{942,629},{183,333},{506,41},{185,862},{911,270},{360,642},{944,497},{200,704},{279,941},{980,756},{361,980},{178,242},{741,893},{501,300},{933,20},{852,91},{51,612},{380,815},{817,988},{183,14},{524,885},{764,724},{489,32},{938,390},{538,676},{120,649},{28,775},{821,176},{884,563},{265,585},{35,272},{807,989},{981,959},{522,975},{491,668},{370,812},{496,62},{58,214},{548,929},{848,1000},{118,525},{64,778},{467,644},{963,510},{129,754},{91,553},{839,916},{635,620},{728,544},{302,227},{675,656},{937,529},{535,371},{902,786},{74,666},{398,202},{805,127},{628,428},{824,579},{846,36},{260,214},{461,592},{985,375},{865,418},{733,932},{946,230},{91,286},{171,767},{897,375},{252,303},{49,230},{851,878},{126,292},{942,991},{873,577},{894,84},{956,158},{461,637},{175,425},{687,188},{693,991},{529,530},{415,236},{516,252},{32,674},{46,812},{582,292},{467,305},{697,434},{244,444},{383,799},{609,295},{223,791},{161,114},{760,287},{439,546},{759,400},{887,469},{200,16},{339,97},{863,627},{1000,698},{595,447},{816,649},{267,683},{379,923},{832,297},{672,653},{130,63},{756,214},{799,280},{437,755},{998,891},{805,915},{973,506},{643,85},{309,224},{941,205},{169,637},{192,173},{263,447},{619,528},{781,100},{79,414},{752,400},{450,194},{171,602},{569,59},{879,315},{34,844},{994,509},{7,419},{898,199},{471,908},{265,335},{569,534},{393,917},{187,571},{261,196},{343,590},{253,754},{627,748},{998,18},{380,237},{951,323},{872,442},{321,418},{552,479},{580,405},{144,248},{585,351},{733,859},{181,81},{786,913},{762,42},{583,767},{391,722},{886,556},{593,571},{499,111},{835,437},{481,953},{495,931},{612,489},{256,6},{287,323},{288,153},{236,895},{676,311},{619,999},{485,724},{832,333},{658,414},{772,289},{733,944},{878,246},{530,158},{762,250},{653,207},{187,748},{970,74},{969,141},{412,568},{437,135},{908,262},{674,349},{411,612},{880,259},{136,825},{838,886},{398,589},{176,829},{737,818},{423,548},{47,428},{408,180},{19,186},{837,235},{142,60},{311,151},{503,595},{9,17},{255,347},{870,765},{902,210},{785,429},{659,823},{509,427},{238,801},{593,867},{993,853},{689,635},{920,945},{882,163},{951,972},{168,89},{228,695},{234,409},{451,651},{350,515},{836,113},{394,829},{973,961},{444,269},{719,168},{847,943},{429,96},{467,949},{749,36},{888,893},{584,254},{704,617},{291,337},{632,928},{411,861},{47,396},{227,899},{325,984},{735,729},{600,55},{987,504},{729,916},{32,667},{625,317},{999,990},{354,29},{866,683},{622,287},{640,681},{331,644},{667,414},{825,7},{5,170},{280,478},{361,950},{199,684},{882,471},{15,612},{69,841},{971,233},{467,380},{518,992},{668,142},{37,118},{624,595},{235,262},{381,431},{389,692},{928,110},{909,726},{484,881},{257,740},{646,248},{472,911},{839,457},{96,364},{66,929},{812,404},{379,654},{273,997},{458,578},{713,716},{568,108},{837,448},{844,360},{679,646},{456,142},{394,581},{73,189},{267,488},{15,540},{683,620},{989,126},{621,738},{566,259},{72,687},{812,955},{2,506},{120,762},{60,128},{488,3},{727,437},{395,680},{611,849},{117,259},{720,827},{565,400},{351,429},{498,637},{789,289},{880,19},{737,805},{292,207},{637,45}};
        int truckSize4 = 136958;
        System.out.println("MaxUnits: " + maximumUnits(boxTypes4, truckSize4));
    }

    public static int maximumUnits(int[][] boxTypes, int maxSize) {

        // Step1 - Set two counters, one to count the totalnumUnits to return and totalBoxes
        int totalNumUnits = 0;
        int totalBoxes = 0;

        // Step2 - Create treeMap to store the boxes key=unitsperbox, value=numBoxes
        Map<Integer, Integer> map = new TreeMap<>();

        // Step3 - Populate the map
        for (int i=0; i < boxTypes.length; i++) {
            int numBoxes = boxTypes[i][0];
            int unitsPerBox = boxTypes[i][1];
            if (map.containsKey(unitsPerBox)) {
                map.put(unitsPerBox, map.get(unitsPerBox) + numBoxes);
            } else {
                map.put(unitsPerBox, numBoxes);
            }
        }

        // Step4 - Find the total
        for (Map.Entry<Integer, Integer> mapEntry : map.entrySet()) {
            totalNumUnits += mapEntry.getKey() * mapEntry.getValue();
            totalBoxes += mapEntry.getValue();
        }

        // Step5 - Reduce the total until its matches maxSize
        // Start with the smallest units first
        List<Integer> keys = new ArrayList<>(map.keySet());
        while (totalBoxes > maxSize) {
            System.out.println("TotalNumUnits: " + totalNumUnits + "    TotalNumBoxes: " + totalBoxes);

            // Step6 - Can we remove enter row
            if (totalBoxes - map.get(keys.get(0)) > maxSize) {

                // Fetch the 1st element ..aka smallest unit per box
                int unitsPerBox = keys.get(0);
                int numBox = map.get(unitsPerBox);

                // Remove smallest element in map and list
                map.remove(unitsPerBox);
                keys.remove(0);

                // Decrement counter
                totalNumUnits -= unitsPerBox * numBox;
                totalBoxes -= numBox;

                continue;
            }

            // Step7 - At this point, we have to remove one by one
            // Fetch the 1st element ..aka smallest unit per box
            int unitsPerBox = keys.get(0);
            int numBox = 1;

            // Step8 - Decrement the count
            map.put(unitsPerBox, map.get(unitsPerBox) - 1);

            // Step9 - Removed from map and list if value is 0
            if (map.get(unitsPerBox) == 0) {
                map.remove(unitsPerBox);
                keys.remove(0);
            }


            totalNumUnits -= unitsPerBox * numBox;
            totalBoxes -= numBox;
        }

        return totalNumUnits;
    }
}

/**
 Notes
 - Definitely not an easy problem
 - Took some time to think about and come up with a solution
 - The wording is easy to misunderstand ...take extra care in understanding

 Solution
 1. Create two counters to store the totalUnitsOfBoxes an totalBoxes
 2. Create TreeMap to populate based from smallest to highest unitperBoX
 3. Populate Map and find the totalUnitOfBoxes and totalBoxes
 4. Create loop which checks if the totalBoxes is larger than the maxSize of truck:
 5. Either remove ENTIRE mapEntry (row) or one by one
    > Decremeent counters accordingly
 */